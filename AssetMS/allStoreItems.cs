using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using MySql.Data.MySqlClient;
using System.IO;

namespace AssetMS
{
    public partial class allStoreItems : DevExpress.XtraEditors.XtraForm, IChildSave
    {
        private string currentUser;
        string pathToPDF;
        static string conString = "Server=localhost; Database=wpams; Uid=root; Pwd=";
        MySqlConnection conn = new MySqlConnection(conString);

        interface IChildSave
        {
            void SaveAction();
            void reset();
            string Xport(String ext);
            void updatethis();
            void deleteThis();
            void NavigateDown();
            void NavigateUp();
        }
        public allStoreItems()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            gridView1.ShowFindPanel();
        }
        public allStoreItems(string ActiveUser)
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            gridView1.ShowFindPanel();
            currentUser = ActiveUser;
        }

        private void btn_action_Click(object sender, EventArgs e)
        {
            //move from store

            var rowHandle = gridView1.FocusedRowHandle;

            // Get the value for the given column - convert to the type you're expecting
            var obj = gridView1.GetRowCellValue(rowHandle, "SerialNumber");

            string id = obj.ToString();
            // MessageBox.Show(id);
            var obj2 = gridView1.GetRowCellValue(rowHandle, "ItemCondition");

            string id2 = obj.ToString();

            DialogResult dlr = DevExpress.XtraEditors.XtraMessageBox.Show("Are you sure you want to move this item from the store?", "System Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (dlr == DialogResult.Yes)
            {
                try
                {
                    conn.Open();
                    using (MySqlCommand command = new MySqlCommand("DELETE FROM storeitems WHERE SerialNumber= @SerialNumber", conn))
                    {
                        command.Parameters.AddWithValue("@SerialNumber", id);
                        command.ExecuteNonQuery();
                        using (MySqlCommand command2 = new MySqlCommand("INSERT INTO unassigneditems(serialNumber) VALUES (@serialNumber)", conn))
                        {
                            command2.Parameters.AddWithValue("@serialNumber", id);
                            command2.ExecuteNonQuery();
                            using (MySqlCommand command4 = new MySqlCommand("UPDATE tblnewitem SET Status=@Status WHERE SerialNumber = @SerialNumber", conn))
                            {
                                command4.Parameters.AddWithValue("@Status", id2);
                                command4.Parameters.AddWithValue("@SerialNumber", id);
                                command4.ExecuteNonQuery();
                                XtraMessageBox.Show("Item has been succesfully removed from store", "Action Successful", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                reset();
                            }
                           // XtraMessageBox.Show("Item has been succesfully removed from store", "Action Successful", MessageBoxButtons.OK, MessageBoxIcon.Information);

                        }
                    }

                }
                catch (MySqlException es)
                {
                    XtraMessageBox.Show(es.ToString());
                }
            }
            else if (dlr == DialogResult.No)
            {
              //  e.Cancel = true;
            }
           
        }

        private void gridControl1_Click(object sender, EventArgs e)
        {

        }

        private void gridView1_RowClick(object sender, DevExpress.XtraGrid.Views.Grid.RowClickEventArgs e)
        {
            var rowHandle = gridView1.FocusedRowHandle;

            // Get the value for the given column - convert to the type you're expecting
            var obj = gridView1.GetRowCellValue(rowHandle, "Serial Number");
        }

        public void SaveAction()
        {
            ////throw new NotImplementedException();
        }

        public void reset()
        {
            // //throw new NotImplementedException();
            sqlDataSource1.Fill();
        }

        public string Xport(string ext)
        {
            using (SaveFileDialog saveDialog = new SaveFileDialog())
            {
                saveDialog.Filter = ext;
                if (saveDialog.ShowDialog() != DialogResult.Cancel)
                {
                    string exportFilePath = saveDialog.FileName;
                    string fileExtenstion = new FileInfo(exportFilePath).Extension;

                    switch (fileExtenstion)
                    {
                        case ".xls":
                            gridControl1.ExportToXls(exportFilePath);
                            break;
                        case ".xlsx":
                            gridControl1.ExportToXlsx(exportFilePath);
                            break;
                        case ".rtf":
                            gridControl1.ExportToRtf(exportFilePath);
                            break;
                        case ".pdf":
                            gridControl1.ExportToPdf(exportFilePath);
                            break;
                        case ".html":
                            gridControl1.ExportToHtml(exportFilePath);
                            break;
                        case ".mht":
                            gridControl1.ExportToMht(exportFilePath);
                            break;
                        default:
                            break;
                    }

                    if (File.Exists(exportFilePath))
                    {
                        try
                        {
                            //Try to open the file and let windows decide how to open it.
                            // System.Diagnostics.Process.Start(exportFilePath);

                            //string ext = Path.GetExtension(exportFilePath);
                            if (!(fileExtenstion.Equals(".pdf")))
                            {
                                System.Diagnostics.Process.Start(exportFilePath);
                            }
                            else
                            {
                                // MessageBox.Show("pdf detected", "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                pathToPDF = exportFilePath;

                            }

                            // pdfviewer pf = new pdfviewer();
                            //pf.
                        }
                        catch
                        {
                            String msg = "The file could not be opened." + Environment.NewLine + Environment.NewLine + "Path: " + exportFilePath;
                            XtraMessageBox.Show(msg, "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                    else
                    {
                        String msg = "The file could not be saved." + Environment.NewLine + Environment.NewLine + "Path: " + exportFilePath;
                        XtraMessageBox.Show(msg, "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }

            return pathToPDF;
        }

        public void updatethis()
        {
           // //throw new NotImplementedException();
        }

        public void deleteThis()
        {
            ////throw new NotImplementedException();
        }

        public void NavigateDown()
        {
            ////throw new NotImplementedException();
            gridView1.MovePrev();
        }

        public void NavigateUp()
        {
            // //throw new NotImplementedException();
            gridView1.MoveNext();
        }

        private void allStoreItems_Load(object sender, EventArgs e)
        {

        }
    }
}